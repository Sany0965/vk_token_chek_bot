import telebot
import vk_api
import requests
import os
import time

# Вставьте токен вашего бота
bot_token = 'сюда'

bot = telebot.TeleBot(bot_token)

def get_user_info(access_token):
    params = {
        'access_token': access_token,
        'v': '5.131',
        'fields': 'domain, status, bdate, city, count_friends, count_groups, followers_count, gifts_count, bdate, photos_count, videos_count, audios_count, sex, occupation, education',
    }
    response = requests.get('https://api.vk.com/method/users.get', params=params)

    try:
        user_info = response.json().get('response')[0]
        return user_info
    except (TypeError, KeyError, IndexError):
        error = response.json().get('error', {})
        return {'error': error.get('error_msg', 'Unknown error')}

def get_gender_text(gender):
    if gender == 1:
        return 'Женский пол'
    elif gender == 2:
        return 'Мужской пол'
    else:
        return 'Не найдено'


@bot.message_handler(commands=['start'])
def handle_start(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "Привет! Я бот для проверки валидности токенов VK. Просто отправь мне файл с токенами в формате txt прямо в чат.")

@bot.message_handler(commands=['help'])
def handle_help(message):
    chat_id = message.chat.id
    help_text = "Чтобы создать файл с токенами VK, посетите [эту страницу](https://telegra.ph/Kak-sozdat-fajl-s-tokenami-VK-01-24)."
    bot.send_message(chat_id, help_text, parse_mode="Markdown")

@bot.message_handler(content_types=['document'])
def handle_document(message):
    try:
        chat_id = message.chat.id
        file_info = bot.get_file(message.document.file_id)

        # Проверяем, является ли файл текстовым документом (.txt)
        if not message.document.file_name.lower().endswith('.txt'):
            bot.send_message(chat_id, "Извините, но этот файл не является текстовым документом (txt). Пожалуйста, отправьте текстовый документ с токенами в формате (.txt)!")
            return

        if file_info.file_size == 0:
            bot.send_message(chat_id, "Ошибка: Файл пуст. Пожалуйста, отправьте файл с корректными данными.")
            return

        bot.send_message(chat_id, f"Сканируем ваш файл: {message.document.file_name}")

        time.sleep(5)  # Задержка в 5 секунд

        start_time = time.time()  # Время начала обработки файла

        file = bot.download_file(file_info.file_path)

        # Считываем токены из файла
        tokens = file.decode('utf-8').split('\n')

        # Подготавливаем данные для документа
        valid_tokens_info = []
        invalid_tokens_count = 0
        duplicate_tokens = {}
        for token in tokens:
            user_info = get_user_info(token)
            if 'error' not in user_info:
                vk_profile_url = f"https://vk.com/{user_info['domain']}"
                username = user_info.get('screen_name', 'Не найдено')
                status = user_info.get('status', 'Не найдено')
                bdate = user_info.get('bdate', 'Не найдено')
                city = user_info.get('city', {}).get('title', 'Не найдено')
                count_friends = user_info.get('count_friends', 'Не найдено')
                count_groups = user_info.get('count_groups', 'Не найдено')
                followers_count = user_info.get('followers_count', 'Не найдено')
                gifts_count = user_info.get('gifts_count', 'Не найдено')
                photos_count = user_info.get('photos_count', 'Не найдено')
                videos_count = user_info.get('videos_count', 'Не найдено')
                audios_count = user_info.get('audios_count', 'Не найдено')
                sex = user_info.get('sex', 'Не найдено')
                occupation = user_info.get('occupation', {}).get('name', 'Не найдено')
                education = user_info.get('education', {}).get('name', 'Не найдено')

                age = 'Не найдено'
                if bdate != 'Не найдено':

                 gender_text = get_gender_text(sex)

                age = 'Не найдено'
                if bdate != 'Не найдено':

                    # Рассчитываем возраст на основе даты рождения
                    birth_year = int(bdate.split('.')[-1])
                    current_year = time.localtime().tm_year
                    age = current_year - birth_year

                token_info = f"Имя: {user_info['first_name']}\nФамилия: {user_info['last_name']}\nСсылка на ВКонтакте: {vk_profile_url}\nUsername: {username}\nВозраст: {age}\nСтатус: {status}\nГород: {city}\nКоличество друзей: {count_friends}\nКоличество групп: {count_groups}\nКоличество подписчиков: {followers_count}\nКоличество подарков: {gifts_count}\nДата рождения: {bdate}\nКоличество фотографий: {photos_count}\nКоличество видеозаписей: {videos_count}\nКоличество аудиозаписей: {audios_count}\nПол: {sex}\nМесто работы: {occupation}\nМесто учёбы: {education}\nТокен: {token}"

                if token_info not in valid_tokens_info:
                    valid_tokens_info.append(token_info)
                else:
                    duplicate_tokens[token_info] = duplicate_tokens.get(token_info, 0) + 1
            else:
                invalid_tokens_count += 1

        end_time = time.time()  # Время завершения обработки файла
        processing_time = end_time - start_time  # Время обработки файла
        processing_speed = len(tokens) / processing_time  # Скорость обработки файла

        # Собираем всю информацию в одну строку
        message_content = f"Количество токенов: {len(tokens)}\n"
        message_content += f"Время обработки: {processing_time:.2f} сек.\n"
        message_content += f"Скорость: {processing_speed:.2f} токен/сек.\n\n"
        message_content += f"Валидные токены: {len(valid_tokens_info)}\n"
        message_content += f"Невалидные токены: {invalid_tokens_count}\n"
        message_content += f"Дублирующиеся токены: {len(duplicate_tokens)} шт.\n"

        # Отправляем сообщение с информацией
        bot.send_message(chat_id, message_content)

        # Собираем всю информацию в одну строку для файла
        document_content = message_content + '\n\n'
        document_content += '\n\n'.join(valid_tokens_info)
        if duplicate_tokens:
            document_content += f"\n\nДублирующиеся токены:\n"
            for token_info, count in duplicate_tokens.items():
                document_content += f"{token_info} - {count} шт.\n"

        # Создаем уникальное имя файла .txt и отправляем его пользователю
        original_file_name = os.path.splitext(message.document.file_name)[0]
        new_file_name = f"{original_file_name}_validity_token_vkBot.txt"
        with open(new_file_name, 'w', encoding='utf-8') as file:
            file.write(document_content)
        with open(new_file_name, 'rb') as file:
            bot.send_document(chat_id, file)

    except Exception as e:
        bot.send_message(chat_id, f"Произошла ошибка: {str(e)}")

if __name__ == "__main__":
    bot.polling(none_stop=True, interval=0)
    
